#!/usr/bin/env python
#
# file: app.cfg
#
# ==============================================================================
# This file contains configuration settings for the callattendant.
#
# The values are in python syntax. You can/should use an editor like
# "nano" which will provide you with syntax highlighting to ensure your
# values are syntactically valid.
# ==============================================================================

# ENV: "production" or "development" environment. "development" implies
# the inclusion of incomplete features and/or experimental code.
ENV = 'production'

# DEBUG: If True, additional assertions and output may be generated
DEBUG = False

# TESTING: If True, functional tests are executed in lieu of normal operation
TESTING = False

# DATABASE: Name of Sqlite database for call log, whitelist and blacklist
DATABASE = "callattendant.db"

# SCREENING_MODE: A tuple containing: "whitelist" and/or "blacklist", or empty
SCREENING_MODE = ("whitelist", "blacklist")

# BLOCK_ENABLED: if True calls that fail screening will be blocked
BLOCK_ENABLED = True

# BLOCK_NAME_PATTERNS: A regex expression dict applied to the CID names
# Example: {"V[0-9]{15}": "Telemarketer Caller ID", "O": "Unknown caller"}
BLOCK_NAME_PATTERNS = {"V[0-9]{15}": "Telemarketer Caller ID",}

# BLOCK_NUMBER_PATTERNS: A regx expression dict applied to the CID numbers
# Example: {"P": "Private number",}
BLOCK_NUMBER_PATTERNS = { }
# BLOCKED_ACTIONS: A tuple containing: "play_greeting" and/or "record_message", or empty
BLOCKED_ACTIONS = ("play_greeting", "record_message")

# BLOCKED_GREETING_FILE: The wav file to be played to blocked callers
BLOCKED_GREETING_FILE = "hardware/blocked.wav"

# BLOCKED_LEAVE_MESSAGE_FILE: The wav file to be before recording a message, e.g., "press 1 to record a message"
BLOCKED_LEAVE_MESSAGE_FILE = "hardware/leave_message.wav"

# BLOCKED_LEAVE_MESSAGE_ACTION: "leave_message" or "press_1_leave_message"
BLOCKED_LEAVE_MESSAGE_ACTION = "leave_message"

